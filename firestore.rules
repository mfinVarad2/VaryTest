rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }

    // Users collection: each user manages their own profile
    match /users/{userId} {
      allow read: if isSignedIn() && request.auth.uid == userId;
      allow create: if isSignedIn() && request.auth.uid == userId;
      // Allow students to update only joinedClasses and status fields from client
      allow update: if isSignedIn() && request.auth.uid == userId &&
        request.resource.data.diff(resource.data).changedKeys().hasOnly(['joinedClasses', 'lastJoinAttemptStatus']);
    }

    // Allow listing/joining classes via collection group queries across all teachers
    // This enables: collectionGroup('classes').where('uniqueCode', '==', CODE)
    match /{path=**}/classes/{classId} {
      // Students can discover classes that are open to join
      allow get, list: if isSignedIn() && resource.data.isJoinable == true;

      // Allow student self-join by adding their UID to students array, only if joinable
      allow update: if isSignedIn()
        && resource.data.isJoinable == true
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['students'])
        // Ensure we're not removing anyone and the user is present in the new list
        && request.resource.data.students.size() >= resource.data.students.size()
        && request.resource.data.students.hasAll(resource.data.students)
        && (request.auth.uid in request.resource.data.students);
    }

    // Teacher-owned namespaces (subjects, classes, questions)
    match /artifacts/{appId}/users/{teacherId}/subjects/{subjectId} {
      allow read, create, update, delete: if isSignedIn() && request.auth.uid == teacherId;
    }

    match /artifacts/{appId}/users/{teacherId}/classes/{classId} {
      // Teachers can manage their own classes fully
      allow read, create, update, delete: if isSignedIn() && request.auth.uid == teacherId;
    }

    match /artifacts/{appId}/users/{teacherId}/questions/{questionId} {
      allow read, create, update, delete: if isSignedIn() && request.auth.uid == teacherId;
    }

    // Integration request collections
    match /joinRequests/{requestId} {
      // Clients may create requests for themselves; CF processes and deletes
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if false;
    }

    match /assignmentRequests/{requestId} {
      allow create: if isSignedIn() && request.resource.data.teacherId == request.auth.uid;
      allow read, update, delete: if false;
    }

    match /testAssignments/{assignmentId} {
      // Only allow teacher to read their own assignments; writes via backend only
      allow read: if isSignedIn() && request.auth.uid == resource.data.teacherId;
      allow write: if false;
    }
  }
}
